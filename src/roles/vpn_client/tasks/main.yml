# Generate client- and server-side configuration for wireguard.
# This role also writes an ad-hoc installation script for the client.
#
# You will require constants for your server. An example of `constants.yml`:
# ---
# wg0:
#   server_public_key: "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX="
#   server_endpoint: "1.2.3.4:52742"
#   server_ip_range: "10.0.0.0/16,10.1.0.0/16"
#
# The MTU on the server-side should match the MTU on the client-side
---
- name: Load constants
  include_vars:
    file: '../../secrets/vpn/constants.yml'
    name: vpn_info

- name: Install wireguard
  apt:
    name: wireguard
    state: present
    update_cache: no

- name: Generate private key
  command: "wg genkey"
  register: private_key
  changed_when: false

- name: Generate public key
  shell:
    cmd: "echo '{{ private_key.stdout }}' | wg pubkey"
  register: public_key
  changed_when: false

- name: Create directory for client config
  file:
    state: directory
    path: "{{ ansible_env.HOME }}/vpn_client_setup"
    mode: 0700
    owner: "{{ ansible_user }}"

- name: Setup client config
  copy:
    dest: "{{ ansible_env.HOME }}/vpn_client_setup/{{ vpn_name }}.conf"
    mode: 0600
    owner: "{{ ansible_user }}"
    content: |
      [Interface]
      PrivateKey = {{ private_key.stdout }}
      Address = {{ client_ip }}/16
      MTU = 1280

      [Peer]
      PublicKey = {{ vpn_info[vpn_name].server_public_key }}
      Endpoint = {{ vpn_info[vpn_name].server_endpoint }}
      AllowedIPs = {{ vpn_info[vpn_name].server_ip_range }}
      {{ optional_persistent_keepalive }}

- name: Write installation script
  copy:
    dest: "{{ ansible_env.HOME }}/vpn_client_setup/vpn_setup.sh"
    mode: 0700
    owner: "{{ ansible_user }}"
    content: |
      #!/bin/bash
      # Run with e.g.:
      # sudo bash vpn_setup.sh
      set -e
      set -x
      set -o pipefail

      # Install wireguard
      apt update && apt install -y wireguard

      # Copy configuration
      cp ./{{ vpn_name }}.conf /etc/wireguard/
      chmod 600 /etc/wireguard/{{ vpn_name }}.conf

      # Enable and restart VPN
      systemctl enable wg-quick@{{ vpn_name }}
      systemctl restart wg-quick@{{ vpn_name }}

- name: Update server-side configuration
  set_fact:
    server_cfg: |
      {{ lookup('file', '../../secrets/vpn/' + vpn_name + '.conf') }}

      # {{ client_name }}
      [Peer]
      PublicKey = {{ public_key.stdout }}
      AllowedIPs = {{ client_ip }}/32

- name: Write updated server-side config
  shell:
    cmd: "echo '{{ server_cfg }}' | ansible-vault encrypt --output ../../secrets/vpn/{{ vpn_name }}.conf"
  args:
    executable: "/bin/bash"
  changed_when: true
